{"/home/travis/build/npmtest/node-npmtest-jenkins/test.js":"/* istanbul instrument in package npmtest_jenkins */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-jenkins/lib.npmtest_jenkins.js":"/* istanbul instrument in package npmtest_jenkins */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_jenkins = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_jenkins = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-jenkins/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-jenkins && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_jenkins */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_jenkins\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_jenkins.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_jenkins.rollup.js'] =\n            local.assetsDict['/assets.npmtest_jenkins.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_jenkins.__dirname + '/lib.npmtest_jenkins.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-jenkins/node_modules/jenkins/lib/index.js":"/**\n * Module index\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar Jenkins = require('./jenkins').Jenkins;\n\n/**\n * Module exports.\n */\n\nvar m = function() {\n  return m.Jenkins.apply(this, arguments);\n};\n\nm.Jenkins = Jenkins;\n\nmodule.exports = m;\n","/home/travis/build/npmtest/node-npmtest-jenkins/node_modules/jenkins/lib/jenkins.js":"/**\n * Jenkins client (papi)\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar papi = require('papi');\nvar util = require('util');\n\nvar Build = require('./build').Build;\nvar CrumbIssuer = require('./crumb_issuer').CrumbIssuer;\nvar Job = require('./job').Job;\nvar Node = require('./node').Node;\nvar Queue = require('./queue').Queue;\nvar View = require('./view').View;\nvar middleware = require('./middleware');\nvar utils = require('./utils');\n\n/**\n * Initialize a new `Jenkins` client.\n */\n\nfunction Jenkins(opts) {\n  if (!(this instanceof Jenkins)) {\n    return new Jenkins(opts);\n  }\n\n  if (typeof opts === 'string') {\n    opts = { baseUrl: opts };\n  } else {\n    opts = opts || {};\n  }\n\n  if (!opts.baseUrl) {\n    if (opts.url) {\n      opts.baseUrl = opts.url;\n      delete opts.url;\n    } else {\n      throw new Error('baseUrl required');\n    }\n  }\n\n  if (!opts.headers) {\n    opts.headers = {};\n  }\n  if (!opts.headers.referer) {\n    opts.headers.referer = opts.baseUrl + '/';\n  }\n\n  if (opts.request) {\n    throw new Error('request not longer supported');\n  }\n\n  opts.name = 'jenkins';\n\n  if (typeof opts.crumbIssuer === 'function') {\n    this._crumbIssuer = opts.crumbIssuer;\n  } else if (opts.crumbIssuer === true) {\n    this._crumbIssuer = utils.crumbIssuer;\n  }\n\n  papi.Client.call(this, opts);\n\n  this._ext('onCreate', this._onCreate);\n  this._ext('onResponse', this._onResponse);\n\n  this.build = new Jenkins.Build(this);\n  this.crumbIssuer = new Jenkins.CrumbIssuer(this);\n  this.job = new Jenkins.Job(this);\n  this.node = new Jenkins.Node(this);\n  this.queue = new Jenkins.Queue(this);\n  this.view = new Jenkins.View(this);\n\n  try {\n    if (opts.promisify) {\n      if (typeof opts.promisify === 'function') {\n        papi.tools.promisify(this, opts.promisify);\n      } else {\n        papi.tools.promisify(this);\n      }\n    }\n  } catch (err) {\n    err.message = 'promisify: ' + err.message;\n    throw err;\n  }\n}\n\nutil.inherits(Jenkins, papi.Client);\n\nJenkins.Build = Build;\nJenkins.CrumbIssuer = CrumbIssuer;\nJenkins.Job = Job;\nJenkins.Node = Node;\nJenkins.Queue = Queue;\nJenkins.View = View;\n\n/**\n * Object meta\n */\n\nJenkins.meta = {};\n\n/**\n * Inject CSRF Protection crumb into POST requests\n */\n\nJenkins.prototype._onCreate = function(ctx, next) {\n  if (!this._crumbIssuer || ctx.opts.method !== 'POST') return next();\n\n  this._crumbIssuer(this, function(err, data) {\n    if (err) return next(err);\n\n    if (data.headerName && data.headerValue) {\n      if (!ctx.opts.headers) ctx.opts.headers = {};\n      ctx.opts.headers[data.headerName] = data.headerValue;\n    }\n\n    next();\n  });\n};\n\n/**\n * Handle responses.\n */\n\nJenkins.prototype._onResponse = function(ctx, next) {\n  if (ctx.err) {\n    if (ctx.res && ctx.res.headers && ctx.res.headers['x-error']) {\n      ctx.err.message = ctx.res.headers['x-error'].replace(/\\?/g, '\"');\n    }\n    ctx.err.res = ctx.res;\n  }\n\n  next();\n};\n\n/**\n * Jenkins info\n */\n\nJenkins.prototype.info = function(opts, callback) {\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  }\n\n  this._log(['debug', 'info'], opts);\n\n  var req = {\n    name: 'info',\n    path: '/api/json',\n  };\n\n  utils.options(req, opts);\n\n  return this._get(req, middleware.body, callback);\n};\n\nJenkins.prototype.get = Jenkins.prototype.info;\n\n/**\n * Walk methods\n */\n\nJenkins.meta.walk = { type: 'sync' };\n\nJenkins.walk = Jenkins.prototype.walk = function() {\n  return papi.tools.walk(Jenkins);\n};\n\n/**\n * Module exports.\n */\n\nexports.Jenkins = Jenkins;\n","/home/travis/build/npmtest/node-npmtest-jenkins/node_modules/jenkins/lib/build.js":"/**\n * Build client\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar LogStream = require('./log_stream').LogStream;\nvar middleware = require('./middleware');\nvar utils = require('./utils');\n\n/**\n * Initialize a new `Build` client.\n */\n\nfunction Build(jenkins) {\n  this.jenkins = jenkins;\n}\n\n/**\n * Object meta\n */\n\nBuild.meta = {};\n\n/**\n * Build details\n */\n\nBuild.prototype.get = function(opts, callback) {\n  var arg0 = typeof arguments[0];\n  var arg1 = typeof arguments[1];\n  var arg2 = typeof arguments[2];\n  var arg3 = typeof arguments[3];\n\n  if (arg0 === 'string' && (arg1 === 'string' || arg1 === 'number')) {\n    if (arg2 === 'object') {\n      opts = arguments[2];\n      callback = arg3 === 'function' ? arguments[3] : undefined;\n    } else {\n      opts = {};\n      callback = arg2 === 'function' ? arguments[2] : undefined;\n    }\n\n    opts.name = arguments[0];\n    opts.number = arguments[1];\n  } else {\n    opts = opts || {};\n  }\n\n  this.jenkins._log(['debug', 'build', 'get'], opts);\n\n  var req = { name: 'build.get' };\n\n  utils.options(req, opts);\n\n  try {\n    var folder = utils.FolderPath(opts.name);\n\n    if (folder.isEmpty()) throw new Error('name required');\n    if (!opts.number) throw new Error('number required');\n\n    req.path = '{folder}/{number}/api/json';\n    req.params = {\n      folder: folder.path(),\n      number: opts.number,\n    };\n  } catch (err) {\n    return callback(this.jenkins._err(err, req));\n  }\n\n  return this.jenkins._get(\n    req,\n    middleware.notFound(opts.name + ' ' + opts.number),\n    middleware.body,\n    callback\n  );\n};\n\n/**\n * Stop build\n */\n\nBuild.prototype.stop = function(opts, callback) {\n  var arg0 = typeof arguments[0];\n  var arg1 = typeof arguments[1];\n\n  if (arg0 === 'string' && (arg1 === 'string' || arg1 === 'number')) {\n    opts = {\n      name: arguments[0],\n      number: arguments[1],\n    };\n    callback = arguments[2];\n  } else {\n    opts = opts || {};\n  }\n\n  this.jenkins._log(['debug', 'build', 'stop'], opts);\n\n  var req = { name: 'build.stop' };\n\n  utils.options(req, opts);\n\n  try {\n    var folder = utils.FolderPath(opts.name);\n\n    if (folder.isEmpty()) throw new Error('name required');\n    if (!opts.number) throw new Error('number required');\n\n    req.path = '{folder}/{number}/stop';\n    req.params = {\n      folder: folder.path(),\n      number: opts.number,\n    };\n  } catch (err) {\n    return callback(this.jenkins._err(err, req));\n  }\n\n  return this.jenkins._post(\n    req,\n    middleware.notFound(opts.name + ' ' + opts.number),\n    middleware.require302('failed to stop: ' + opts.name),\n    middleware.empty,\n    callback\n  );\n};\n\n/**\n* Get build log\n*/\n\nBuild.prototype.log = function(opts, callback) {\n  var arg0 = typeof arguments[0];\n  var arg1 = typeof arguments[1];\n  var arg2 = typeof arguments[2];\n  var arg3 = typeof arguments[3];\n\n  if (arg0 === 'string' && (arg1 === 'string' || arg1 === 'number')) {\n    if (arg2 === 'object') {\n      opts = arguments[2];\n      callback = arg3 === 'function' ? arguments[3] : undefined;\n    } else {\n      opts = {};\n      callback = arg2 === 'function' ? arguments[2] : undefined;\n    }\n\n    opts.name = arguments[0];\n    opts.number = arguments[1];\n  } else {\n    opts = opts || {};\n  }\n\n  this.jenkins._log(['debug', 'build', 'log'], opts);\n\n  var req = { name: 'build.log' };\n\n  utils.options(req, opts);\n\n  try {\n    var folder = utils.FolderPath(opts.name);\n\n    if (folder.isEmpty()) throw new Error('name required');\n    if (!opts.number) throw new Error('number required');\n\n    req.path = '{folder}/{number}/logText/progressive{type}';\n    req.params = {\n      folder: folder.path(),\n      number: opts.number,\n      type: opts.type === 'html' ? 'Html' : 'Text',\n    };\n    req.type = 'form';\n    req.body = {};\n    if (opts.hasOwnProperty('start')) req.body.start = opts.start;\n  } catch (err) {\n    return callback(this.jenkins._err(err, req));\n  }\n\n  return this.jenkins._post(\n    req,\n    middleware.notFound(opts.name + ' ' + opts.number),\n    function(ctx, next) {\n      if (ctx.err) return next(ctx.err);\n      if (!opts.meta) return next(false, null, ctx.res.body);\n\n      var data = {\n        text: ctx.res.body,\n        more: ctx.res.headers['x-more-data'] === 'true',\n      };\n\n      if (ctx.res.headers['x-text-size']) {\n        data.size = ctx.res.headers['x-text-size'];\n      }\n\n      next(false, null, data);\n    },\n    callback\n  );\n};\n\n/**\n* Get log stream\n*/\n\nBuild.meta.logStream = { type: 'eventemitter' };\n\nBuild.prototype.logStream = function(opts) {\n  var arg0 = typeof arguments[0];\n  var arg1 = typeof arguments[1];\n  var arg2 = typeof arguments[2];\n\n  if (arg0 === 'string' && (arg1 === 'string' || arg1 === 'number')) {\n    if (arg2 === 'object') {\n      opts = arguments[2];\n    } else {\n      opts = {};\n    }\n\n    opts.name = arguments[0];\n    opts.number = arguments[1];\n  } else {\n    opts = opts || {};\n  }\n\n  return new LogStream(this.jenkins, opts);\n};\n\n/**\n * Module exports.\n */\n\nexports.Build = Build;\n","/home/travis/build/npmtest/node-npmtest-jenkins/node_modules/jenkins/lib/log_stream.js":"/**\n * Log stream.\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar events = require('events');\nvar util = require('util');\n\n/**\n * Initialize a new `LogStream` instance.\n */\n\nfunction LogStream(jenkins, opts) {\n  var self = this;\n\n  events.EventEmitter.call(self);\n\n  self._jenkins = jenkins;\n\n  opts = opts || {};\n\n  self._delay = opts.delay || 1000;\n  delete opts.delay;\n\n  self._opts = {};\n  for (var key in opts) {\n    if (opts.hasOwnProperty(key)) {\n      self._opts[key] = opts[key];\n    }\n  }\n  self._opts.meta = true;\n\n  process.nextTick(function() { self._run(); });\n}\n\nutil.inherits(LogStream, events.EventEmitter);\n\n/**\n * Object meta\n */\n\nLogStream.meta = {};\n\n/**\n * End watch\n */\n\nLogStream.meta.end = { type: 'sync' };\n\nLogStream.prototype.end = function() {\n  clearTimeout(this._timeoutId);\n\n  if (this._end) return;\n  this._end = true;\n\n  this.emit('end');\n};\n\n/**\n * Error helper\n */\n\nLogStream.prototype._err = function(err) {\n  if (this._end) return;\n\n  this.emit('error', err);\n\n  this.end();\n};\n\n/**\n * Run\n */\n\nLogStream.prototype._run = function() {\n  var self = this;\n\n  if (self._end) return;\n\n  try {\n    self._jenkins.build.log(self._opts, function(err, data) {\n      if (self._end) return;\n      if (err) return self._err(err);\n\n      if (typeof data.text === 'string') self.emit('data', data.text);\n\n      if (!data.more) return self.end();\n      if (data.size) self._opts.start = data.size;\n\n      self._timeoutId = setTimeout(function() { self._run(); }, self._delay);\n    });\n  } catch (err) {\n    self._err(err);\n  }\n};\n\n/**\n * Module exports.\n */\n\nexports.LogStream = LogStream;\n","/home/travis/build/npmtest/node-npmtest-jenkins/node_modules/jenkins/lib/middleware.js":"/**\n * Format Papi responses\n */\n\n'use strict';\n\n/**\n * Body\n */\n\nfunction body(ctx, next) {\n  if (ctx.err) return next(ctx.err);\n\n  next(false, null, ctx.res.body);\n}\n\n/**\n * Body item\n */\n\nfunction bodyItem(key) {\n  return function(ctx, next) {\n    if (ctx.err) return next(ctx.err);\n\n    next(false, null, ctx.res.body[key]);\n  };\n}\n\n/**\n * Empty\n */\n\nfunction empty(ctx, next) {\n  if (ctx.err) return next(ctx.err);\n\n  next(false);\n}\n\n/**\n * Exists\n */\n\nfunction exists(ctx, next) {\n  if (ctx.res && ctx.res.statusCode === 404) {\n    return next(false, null, false);\n  }\n\n  if (ctx.err) return next(ctx.err);\n\n  next(false, null, true);\n}\n\n/**\n * Require 302 or error\n */\n\nfunction require302(message) {\n  return function(ctx, next) {\n    if (ctx.res && ctx.res.statusCode === 302) {\n      return next(false);\n    } else if (ctx.res) {\n      if (ctx.err) {\n        if (!ctx.res.headers['x-error']) ctx.err.message = message;\n      } else {\n        ctx.err = new Error(message);\n      }\n\n      return next(ctx.err);\n    }\n\n    next();\n  };\n}\n\n/**\n * Not found\n */\n\nfunction notFound(value) {\n  return function(ctx, next) {\n    if (ctx.res && ctx.res.statusCode === 404) {\n      var err = new Error(value + ' not found');\n      err.notFound = true;\n\n      return next(err);\n    }\n\n    next();\n  };\n}\n\n/**\n * Queue location\n */\n\nfunction queueLocation(ctx, next) {\n  if (ctx.err) return next(ctx.err);\n\n  try {\n    // Get queue number from location header\n    var parts = ctx.res.headers.location.split('/');\n\n    return next(false, null, parseInt(parts[parts.length - 2], 10));\n  } catch (err) {\n    // ignore errors\n  }\n\n  next();\n}\n\n/**\n * Module exports\n */\n\nexports.body = body;\nexports.bodyItem = bodyItem;\nexports.empty = empty;\nexports.exists = exists;\nexports.notFound = notFound;\nexports.queueLocation = queueLocation;\nexports.require302 = require302;\n","/home/travis/build/npmtest/node-npmtest-jenkins/node_modules/jenkins/lib/utils.js":"/**\n * Helper functions\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar urlParse = require('url').parse;\n\n/**\n * Common options\n */\n\nfunction options(req, opts) {\n  if (!req.query) req.query = {};\n\n  if (typeof opts.depth === 'number') {\n    req.query.depth = opts.depth;\n  }\n\n  if (typeof opts.tree === 'string') {\n    req.query.tree = opts.tree;\n  }\n\n  return opts;\n}\n\n/**\n * Raw path param\n */\n\nfunction RawParam(value) {\n  this.encode = false;\n  this.value = value || '';\n}\n\nRawParam.prototype.toString = function() {\n  return this.value;\n};\n\n/**\n * Parse job name from URL\n */\n\nfunction parseName(value) {\n  var jobParts = [];\n\n  var pathParts = (urlParse(value).pathname || '').split('/').filter(Boolean);\n  var state = 0;\n  var part;\n\n  // iterate until we find our first job, then collect the continuous job parts\n  //   ['foo', 'job', 'a', 'job', 'b', 'bar', 'job', 'c'] => ['a', 'b']\n  loop:\n  for (var i = 0; i < pathParts.length; i++) {\n    part = pathParts[i];\n\n    switch (state) {\n      case 0:\n        if (part === 'job') state = 2;\n        break;\n      case 1:\n        if (part !== 'job') break loop;\n        state = 2;\n        break;\n      case 2:\n        jobParts.push(part);\n        state = 1;\n        break;\n    }\n  }\n\n  return jobParts.map(decodeURIComponent);\n}\n\n/**\n * Path for folder plugin\n */\n\nfunction FolderPath(value) {\n  if (!(this instanceof FolderPath)) {\n    return new FolderPath(value);\n  }\n  if (Array.isArray(value)) {\n    this.value = value;\n  } else if (typeof value === 'string') {\n    if (value.match('^https?:\\/\\/')) {\n      this.value = parseName(value);\n    } else {\n      this.value = value.split('/').filter(Boolean);\n    }\n  } else {\n    this.value = [];\n  }\n}\n\nFolderPath.SEP = '/job/';\n\nFolderPath.prototype.isEmpty = function() {\n  return !this.value.length;\n};\n\nFolderPath.prototype.name = function() {\n  return this.value[this.value.length - 1] || '';\n};\n\nFolderPath.prototype.path = function() {\n  if (this.isEmpty()) return new RawParam();\n  return new RawParam(FolderPath.SEP + this.value.map(encodeURIComponent).join(FolderPath.SEP));\n};\n\nFolderPath.prototype.parent = function() {\n  return new FolderPath(this.value.slice(0, Math.max(0, this.value.length - 1)));\n};\n\nFolderPath.prototype.dir = function() {\n  return this.parent().path();\n};\n\n/**\n * Default crumb issuser\n */\n\nfunction crumbIssuer(jenkins, callback) {\n  jenkins.crumbIssuer.get(function(err, data) {\n    if (err) return callback(err);\n    if (!data || !data.crumbRequestField || !data.crumb) {\n      return callback(new Error('Failed to get crumb'));\n    }\n\n    callback(null, {\n      headerName: data.crumbRequestField,\n      headerValue: data.crumb,\n    });\n  });\n}\n\n/**\n * Module exports\n */\n\nexports.options = options;\nexports.FolderPath = FolderPath;\nexports.crumbIssuer = crumbIssuer;\n","/home/travis/build/npmtest/node-npmtest-jenkins/node_modules/jenkins/lib/crumb_issuer.js":"/**\n * CrumbIssuer client\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar middleware = require('./middleware');\nvar utils = require('./utils');\n\n/**\n * Initialize a new `CrumbIssuer` client.\n */\n\nfunction CrumbIssuer(jenkins) {\n  this.jenkins = jenkins;\n}\n\n/**\n * Object meta\n */\n\nCrumbIssuer.meta = {};\n\n/**\n * Get crumb\n */\n\nCrumbIssuer.prototype.get = function(opts, callback) {\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  }\n\n  this.jenkins._log(['debug', 'crumbIssuer', 'get'], opts);\n\n  var req = {\n    name: 'crumbIssuer.get',\n    path: '/crumbIssuer/api/json',\n  };\n\n  utils.options(req, opts);\n\n  return this.jenkins._get(req, middleware.body, callback);\n};\n\n/**\n * Module exports.\n */\n\nexports.CrumbIssuer = CrumbIssuer;\n","/home/travis/build/npmtest/node-npmtest-jenkins/node_modules/jenkins/lib/job.js":"/**\n * Job client\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar middleware = require('./middleware');\nvar utils = require('./utils');\n\n/**\n * Initialize a new `Job` client.\n */\n\nfunction Job(jenkins) {\n  this.jenkins = jenkins;\n}\n\n/**\n * Object meta\n */\n\nJob.meta = {};\n\n/**\n * Trigger job build\n */\n\nJob.prototype.build = function(opts, callback) {\n  var arg0 = typeof arguments[0];\n  var arg1 = typeof arguments[1];\n  var arg2 = typeof arguments[2];\n\n  if (arg0 === 'string') {\n    if (arg1 === 'object') {\n      opts = arguments[1];\n      callback = arg2 === 'function' ? arguments[2] : undefined;\n    } else {\n      opts = {};\n      callback = arg1 === 'function' ? arguments[1] : undefined;\n    }\n    opts.name = arguments[0];\n  }\n\n  opts = opts || {};\n\n  this.jenkins._log(['debug', 'job', 'build'], opts);\n\n  var req = { name: 'job.build' };\n\n  utils.options(req, opts);\n\n  try {\n    var folder = utils.FolderPath(opts.name);\n\n    if (folder.isEmpty()) throw new Error('name required');\n\n    req.path = '{folder}/build';\n    req.params = { folder: folder.path() };\n\n    if (opts.parameters) {\n      req.path += 'WithParameters';\n      req.query = opts.parameters;\n    }\n\n    if (opts.token) req.query.token = opts.token;\n  } catch (err) {\n    return callback(this.jenkins._err(err, req));\n  }\n\n  return this.jenkins._post(\n    req,\n    middleware.notFound(opts.name),\n    middleware.queueLocation,\n    callback\n  );\n};\n\n/**\n * Get or update config\n */\n\nJob.prototype.config = function(opts, callback) {\n  var arg0 = typeof arguments[0];\n  var arg1 = typeof arguments[1];\n  var arg2 = typeof arguments[2];\n\n  if (arg0 === 'string') {\n    opts = { name: arguments[0] };\n    if (arg1 === 'string') {\n      opts.xml = arguments[1];\n      callback = arg2 === 'function' ? arguments[2] : undefined;\n    } else {\n      callback = arg1 === 'function' ? arguments[1] : undefined;\n    }\n  }\n\n  opts = opts || {};\n\n  this.jenkins._log(['debug', 'job', 'config'], opts);\n\n  var req = { name: 'job.config' };\n\n  utils.options(req, opts);\n\n  try {\n    var folder = utils.FolderPath(opts.name);\n\n    if (folder.isEmpty()) throw new Error('name required');\n\n    req.path = '{folder}/config.xml';\n    req.params = { folder: folder.path() };\n\n    if (opts.xml) {\n      req.method = 'POST';\n      req.headers = { 'content-type': 'text/xml' };\n      req.body = new Buffer(opts.xml);\n    } else {\n      req.method = 'GET';\n    }\n  } catch (err) {\n    return callback(this.jenkins._err(err, req));\n  }\n\n  return this.jenkins._request(\n    req,\n    middleware.notFound('job ' + opts.name),\n    function(ctx, next) {\n      if (ctx.err || opts.xml) return middleware.empty(ctx, next);\n\n      next(false, null, ctx.res.body.toString('utf8'));\n    },\n    callback\n  );\n};\n\n/**\n * Copy job\n */\n\nJob.prototype.copy = function(opts, callback) {\n  var arg0 = typeof arguments[0];\n  var arg1 = typeof arguments[1];\n  var arg2 = typeof arguments[2];\n\n  if (arg0 === 'string' && arg1 === 'string') {\n    opts = {\n      from: arguments[0],\n      name: arguments[1],\n    };\n    callback = arg2 === 'function' ? arguments[2] : undefined;\n  }\n\n  opts = opts || {};\n\n  this.jenkins._log(['debug', 'job', 'copy'], opts);\n\n  var req = { name: 'job.copy' };\n\n  utils.options(req, opts);\n\n  try {\n    var folder = utils.FolderPath(opts.name);\n\n    if (folder.isEmpty()) throw new Error('name required');\n    if (!opts.from) throw new Error('from required');\n\n    req.path = '{dir}/createItem';\n    req.headers = { 'content-type': 'text/xml' };\n    req.params = { dir: folder.dir() };\n    req.query.name = folder.name();\n    req.query.from = opts.from;\n    req.query.mode = 'copy';\n  } catch (err) {\n    return callback(this.jenkins._err(err, req));\n  }\n\n  return this.jenkins._post(\n    req,\n    middleware.require302('failed to create: ' + opts.name),\n    middleware.empty,\n    callback\n  );\n};\n\n/**\n * Create new job from xml\n */\n\nJob.prototype.create = function(opts, callback) {\n  var arg0 = typeof arguments[0];\n  var arg1 = typeof arguments[1];\n  var arg2 = typeof arguments[2];\n\n  if (arg0 === 'string' && arg1 === 'string') {\n    opts = {\n      name: arguments[0],\n      xml: arguments[1],\n    };\n    callback = arg2 === 'function' ? arguments[2] : undefined;\n  }\n\n  opts = opts || {};\n\n  this.jenkins._log(['debug', 'job', 'create'], opts);\n\n  var req = { name: 'job.create' };\n\n  utils.options(req, opts);\n\n  try {\n    var folder = utils.FolderPath(opts.name);\n\n    if (folder.isEmpty()) throw new Error('name required');\n    if (!opts.xml) throw new Error('xml required');\n\n    req.path = '{dir}/createItem';\n    req.headers = { 'content-type': 'text/xml' };\n    req.params = { dir: folder.dir() };\n    req.query.name = folder.name();\n    req.body = new Buffer(opts.xml);\n  } catch (err) {\n    return callback(this.jenkins._err(err, req));\n  }\n\n  return this.jenkins._post(req, middleware.empty, callback);\n};\n\n/**\n * Destroy job\n */\n\nJob.prototype.destroy = function(opts, callback) {\n  if (typeof opts === 'string') {\n    opts = { name: opts };\n  } else {\n    opts = opts || {};\n  }\n\n  this.jenkins._log(['debug', 'job', 'destroy'], opts);\n\n  var req = { name: 'job.destroy' };\n\n  utils.options(req, opts);\n\n  try {\n    var folder = utils.FolderPath(opts.name);\n\n    if (folder.isEmpty()) throw new Error('name required');\n\n    req.path = '{folder}/doDelete';\n    req.params = { folder: folder.path() };\n  } catch (err) {\n    return callback(this.jenkins._err(err, req));\n  }\n\n  return this.jenkins._post(\n    req,\n    middleware.notFound(opts.name),\n    middleware.require302('failed to delete: ' + opts.name),\n    middleware.empty,\n    callback\n  );\n};\n\nJob.meta.delete = { type: 'alias' };\n\nJob.prototype.delete = Job.prototype.destroy;\n\n/**\n * Disable job\n */\n\nJob.prototype.disable = function(opts, callback) {\n  if (typeof opts === 'string') {\n    opts = { name: opts };\n  } else {\n    opts = opts || {};\n  }\n\n  this.jenkins._log(['debug', 'job', 'disable'], opts);\n\n  var req = { name: 'job.disable' };\n\n  utils.options(req, opts);\n\n  try {\n    var folder = utils.FolderPath(opts.name);\n\n    if (folder.isEmpty()) throw new Error('name required');\n\n    req.path = '{folder}/disable';\n    req.params = { folder: folder.path() };\n  } catch (err) {\n    return callback(this.jenkins._err(err, req));\n  }\n\n  return this.jenkins._post(\n    req,\n    middleware.notFound(opts.name),\n    middleware.require302('failed to disable: ' + opts.name),\n    middleware.empty,\n    callback\n  );\n};\n\n/**\n * Enable job\n */\n\nJob.prototype.enable = function(opts, callback) {\n  if (typeof opts === 'string') {\n    opts = { name: opts };\n  } else {\n    opts = opts || {};\n  }\n\n  this.jenkins._log(['debug', 'job', 'enable'], opts);\n\n  var req = { name: 'job.enable' };\n\n  utils.options(req, opts);\n\n  try {\n    var folder = utils.FolderPath(opts.name);\n\n    if (folder.isEmpty()) throw new Error('name required');\n\n    req.path = '{folder}/enable';\n    req.params = { folder: folder.path() };\n  } catch (err) {\n    return callback(this.jenkins._err(err, req));\n  }\n\n  return this.jenkins._post(\n    req,\n    middleware.notFound(opts.name),\n    middleware.require302('failed to enable: ' + opts.name),\n    middleware.empty,\n    callback\n  );\n};\n\n/**\n * Job exists\n */\n\nJob.prototype.exists = function(opts, callback) {\n  if (typeof opts === 'string') {\n    opts = { name: opts };\n  } else {\n    opts = opts || {};\n  }\n\n  this.jenkins._log(['debug', 'job', 'exists'], opts);\n\n  var req = { name: 'job.exists' };\n\n  utils.options(req, opts);\n\n  try {\n    var folder = utils.FolderPath(opts.name);\n\n    if (folder.isEmpty()) throw new Error('name required');\n\n    req.path = '{folder}/api/json';\n    req.params = { folder: folder.path() };\n  } catch (err) {\n    return callback(this.jenkins._err(err, req));\n  }\n\n  return this.jenkins._head(req, middleware.exists, callback);\n};\n\n/**\n * Job details\n */\n\nJob.prototype.get = function(opts, callback) {\n  var arg0 = typeof arguments[0];\n  var arg1 = typeof arguments[1];\n  var arg2 = typeof arguments[2];\n\n  if (arg0 === 'string') {\n    if (arg1 === 'object') {\n      opts = arguments[1];\n      callback = arg2 === 'function' ? arguments[2] : undefined;\n    } else {\n      opts = {};\n      callback = arg1 === 'function' ? arguments[1] : undefined;\n    }\n    opts.name = arguments[0];\n  } else {\n    opts = opts || {};\n  }\n\n  this.jenkins._log(['debug', 'job', 'get'], opts);\n\n  var req = { name: 'job.get' };\n\n  utils.options(req, opts);\n\n  try {\n    var folder = utils.FolderPath(opts.name);\n\n    if (folder.isEmpty()) throw new Error('name required');\n\n    req.path = '{folder}/api/json';\n    req.params = { folder: folder.path() };\n  } catch (err) {\n    return callback(this.jenkins._err(err, req));\n  }\n\n  return this.jenkins._get(\n    req,\n    middleware.notFound(opts.name),\n    middleware.body,\n    callback\n  );\n};\n\n/**\n * List jobs\n */\n\nJob.prototype.list = function(opts, callback) {\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  } else {\n    opts = opts || {};\n  }\n\n  this.jenkins._log(['debug', 'job', 'list'], opts);\n\n  var req = {\n    name: 'job.list',\n    path: '/api/json',\n  };\n\n  utils.options(req, opts);\n\n  return this.jenkins._get(\n    req,\n    function(ctx, next) {\n      if (ctx.err) return next();\n\n      if (!ctx.res.body || !Array.isArray(ctx.res.body.jobs)) {\n        ctx.err = new Error('returned bad data');\n      }\n\n      next();\n    },\n    middleware.bodyItem('jobs'),\n    callback\n  );\n};\n\n/**\n * Module exports.\n */\n\nexports.Job = Job;\n","/home/travis/build/npmtest/node-npmtest-jenkins/node_modules/jenkins/lib/node.js":"/**\n * Node client\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar middleware = require('./middleware');\nvar utils = require('./utils');\n\n/**\n * Initialize a new `Node` client.\n */\n\nfunction Node(jenkins) {\n  this.jenkins = jenkins;\n}\n\n/**\n * Object meta\n */\n\nNode.meta = {};\n\n/**\n * Get or update config\n */\n\nNode.prototype.config = function(opts, callback) {\n  var arg0 = typeof arguments[0];\n  var arg1 = typeof arguments[1];\n  var arg2 = typeof arguments[2];\n\n  if (arg0 === 'string') {\n    opts = { name: arguments[0] };\n    if (arg1 === 'string') {\n      opts.xml = arguments[1];\n      callback = arg2 === 'function' ? arguments[2] : undefined;\n    } else {\n      callback = arg1 === 'function' ? arguments[1] : undefined;\n    }\n  }\n\n  opts = opts || {};\n\n  this.jenkins._log(['debug', 'node', 'config'], opts);\n\n  var req = { name: 'node.config' };\n\n  utils.options(req, opts);\n\n  try {\n    if (!opts.name) throw new Error('name required');\n\n    req.path = '/computer/{name}/config.xml';\n    req.params = {\n      name: opts.name === 'master' ? '(master)' : opts.name,\n    };\n\n    if (opts.xml) {\n      if (opts.name === 'master') {\n        throw new Error('master not supported');\n      }\n\n      req.method = 'POST';\n      req.headers = { 'content-type': 'text/xml' };\n      req.body = new Buffer(opts.xml);\n    } else {\n      req.method = 'GET';\n    }\n  } catch (err) {\n    return callback(this.jenkins._err(err, req));\n  }\n\n  return this.jenkins._request(\n    req,\n    middleware.notFound('node ' + opts.name),\n    function(ctx, next) {\n      if (ctx.err || opts.xml) return middleware.empty(ctx, next);\n\n      next(false, null, ctx.res.body.toString('utf8'));\n    },\n    callback\n  );\n};\n\n/**\n * Create node\n */\n\nNode.prototype.create = function(opts, callback) {\n  var arg0 = typeof arguments[0];\n  var arg1 = typeof arguments[1];\n  var arg2 = typeof arguments[2];\n\n  if (arg0 === 'string') {\n    if (arg1 === 'object') {\n      opts = arguments[1];\n      callback = arg2 === 'function' ? arguments[2] : undefined;\n    } else {\n      opts = {};\n      callback = arg1 === 'function' ? arguments[1] : undefined;\n    }\n    opts.name = arguments[0];\n  } else {\n    opts = opts || {};\n  }\n\n  opts.type = opts.type || 'hudson.slaves.DumbSlave$DescriptorImpl';\n  opts.retentionStrategy = opts.retentionStrategy ||\n    { 'stapler-class': 'hudson.slaves.RetentionStrategy$Always' };\n  opts.nodeProperties = opts.nodeProperties || { 'stapler-class-bag': 'true' };\n  opts.launcher = opts.launcher ||\n    { 'stapler-class': 'hudson.slaves.JNLPLauncher' };\n  opts.numExecutors = opts.hasOwnProperty('numExecutors') ?\n    opts.numExecutors : 2;\n  opts.remoteFS = opts.remoteFS || '/var/lib/jenkins';\n  opts.mode = opts.mode || (opts.exclusive ? 'EXCLUSIVE' : 'NORMAL');\n\n  this.jenkins._log(['debug', 'node', 'create'], opts);\n\n  var req = { name: 'node.create' };\n\n  utils.options(req, opts);\n\n  try {\n    if (!opts.name) throw new Error('name required');\n\n    req.path = '/computer/doCreateItem';\n    req.query.name = opts.name;\n    req.query.type = opts.type;\n    req.query.json = JSON.stringify({\n      name: opts.name,\n      nodeDescription: opts.nodeDescription,\n      numExecutors: opts.numExecutors,\n      remoteFS: opts.remoteFS,\n      labelString: opts.labelString,\n      mode: opts.mode,\n      type: opts.type,\n      retentionStrategy: opts.retentionStrategy,\n      nodeProperties: opts.nodeProperties,\n      launcher: opts.launcher,\n    });\n  } catch (err) {\n    return callback(this.jenkins._err(err, req));\n  }\n\n  return this.jenkins._post(\n    req,\n    middleware.require302('failed to create: ' + opts.name),\n    middleware.empty,\n    callback\n  );\n};\n\n/**\n * Destroy node\n */\n\nNode.prototype.destroy = function(opts, callback) {\n  if (typeof opts === 'string') {\n    opts = { name: opts };\n  } else {\n    opts = opts || {};\n  }\n\n  this.jenkins._log(['debug', 'node', 'destroy'], opts);\n\n  var req = { name: 'node.destroy' };\n\n  utils.options(req, opts);\n\n  try {\n    if (!opts.name) throw new Error('name required');\n\n    req.path = '/computer/{name}/doDelete';\n    req.params = { name: opts.name };\n  } catch (err) {\n    return callback(this.jenkins._err(err, req));\n  }\n\n  return this.jenkins._post(\n    req,\n    middleware.notFound(opts.name),\n    middleware.require302('failed to delete: ' + opts.name),\n    middleware.empty,\n    callback\n  );\n};\n\nNode.meta.delete = { type: 'alias' };\n\nNode.prototype.delete = Node.prototype.destroy;\n\n/**\n * Disconnect node call\n */\n\nNode.prototype.doDisconnect = function(opts, callback) {\n  opts = opts || {};\n\n  this.jenkins._log(['debug', 'node', 'doDisconnect'], opts);\n\n  var req = { name: 'node.doDisconnect' };\n\n  utils.options(req, opts);\n\n  try {\n    if (!opts.name) throw new Error('name required');\n\n    req.path = '/computer/{name}/doDisconnect';\n    req.params = { name: opts.name };\n    req.query.offlineMessage = opts.message || '';\n  } catch (err) {\n    return callback(this.jenkins._err(err, req));\n  }\n\n  return this.jenkins._post(\n      req,\n      middleware.notFound(opts.name),\n      middleware.require302('failed to disconnect: ' + opts.name),\n      middleware.empty,\n      callback\n  );\n};\n\n/**\n * Toggle offline\n */\n\nNode.prototype.toggleOffline = function(opts, callback) {\n  opts = opts || {};\n\n  this.jenkins._log(['debug', 'node', 'toggleOffline'], opts);\n\n  var req = { name: 'node.toggleOffline' };\n\n  utils.options(req, opts);\n\n  try {\n    if (!opts.name) throw new Error('name required');\n\n    req.path = '/computer/{name}/toggleOffline';\n    req.params = { name: opts.name };\n    req.query.offlineMessage = opts.message || '';\n  } catch (err) {\n    return callback(this.jenkins._err(err, req));\n  }\n\n  return this.jenkins._post(\n    req,\n    middleware.notFound(opts.name),\n    middleware.require302('failed to toggle offline: ' + opts.name),\n    middleware.empty,\n    callback\n  );\n};\n\n/**\n * Change offline message\n */\n\nNode.prototype.changeOfflineCause = function(opts, callback) {\n  opts = opts || {};\n\n  opts.message = opts.message || '';\n\n  this.jenkins._log(['debug', 'node', 'changeOfflineCause'], opts);\n\n  var req = { name: 'node.changeOfflineCause' };\n\n  utils.options(req, opts);\n\n  try {\n    if (!opts.name) throw new Error('name required');\n\n    req.path = '/computer/{name}/changeOfflineCause';\n    req.params = { name: opts.name };\n    req.type = 'form';\n    req.body = {\n      offlineMessage: opts.message,\n      json: JSON.stringify({\n        offlineMessage: opts.message,\n      }),\n      Submit: 'Update reason',\n    };\n  } catch (err) {\n    return callback(this.jenkins._err(err, req));\n  }\n\n  return this.jenkins._post(\n    req,\n    middleware.notFound(opts.name),\n    middleware.require302('failed to update offline message: ' + opts.name),\n    middleware.empty,\n    callback\n  );\n};\n\n/**\n * Disconnect node\n */\n\nNode.prototype.disconnect = function(opts, callback) {\n  var self = this;\n\n  var arg0 = typeof arguments[0];\n  var arg1 = typeof arguments[1];\n\n  if (arg0 === 'string' && arg1 === 'string') {\n    opts = {\n      name: arguments[0],\n      message: arguments[1],\n    };\n    callback = arguments[2];\n  } else if (typeof opts === 'string') {\n    opts = { name: opts };\n  } else {\n    opts = opts || {};\n  }\n\n  self.jenkins._log(['debug', 'node', 'disconnect'], opts);\n\n  if (!opts.name) {\n    return callback(this.jenkins._err('name required', { name: 'node.disconnect' }));\n  }\n\n  self.get(opts.name, function(err, node) {\n    if (err) return callback(err);\n\n    if (node && node.offline) {\n      return self.toggleOffline({ name: opts.name, message: opts.message }, function(err) {\n        if (err) return callback(err);\n\n        callback();\n      });\n    }\n\n    self.doDisconnect({ name: opts.name, message: opts.message }, function(err) {\n      if (err) return callback(err);\n\n      callback();\n    });\n  });\n};\n\n/**\n * Disable node\n */\n\nNode.prototype.disable = function(opts, callback) {\n  var self = this;\n\n  var arg0 = typeof arguments[0];\n  var arg1 = typeof arguments[1];\n\n  if (arg0 === 'string' && arg1 === 'string') {\n    opts = {\n      name: arguments[0],\n      message: arguments[1],\n    };\n    callback = arguments[2];\n  } else if (typeof opts === 'string') {\n    opts = { name: opts };\n  } else {\n    opts = opts || {};\n  }\n\n  self.jenkins._log(['debug', 'node', 'disable'], opts);\n\n  if (!opts.name) {\n    return callback(this.jenkins._err('name required', { name: 'node.disable' }));\n  }\n\n  self.get(opts.name, function(err, node) {\n    if (err) return callback(err);\n\n    if (node && node.temporarilyOffline) {\n      if (node.offlineCauseReason !== opts.message) {\n        return self.changeOfflineCause({\n          name: opts.name,\n          message: opts.message,\n        }, callback);\n      }\n\n      return callback();\n    }\n\n    self.toggleOffline({ name: opts.name, message: opts.message }, function(err) {\n      if (err) return callback(err);\n\n      callback();\n    });\n  });\n};\n\n/**\n * Enable node\n */\n\nNode.prototype.enable = function(opts, callback) {\n  var self = this;\n\n  if (typeof opts === 'string') {\n    opts = { name: opts };\n  } else {\n    opts = opts || {};\n  }\n\n  self.jenkins._log(['debug', 'node', 'enable'], opts);\n\n  if (!opts.name) {\n    return callback(this.jenkins._err('name required', { name: 'node.enable' }));\n  }\n\n  self.get(opts.name, function(err, node) {\n    if (err) return callback(err);\n\n    if (!node.temporarilyOffline) return callback();\n\n    self.toggleOffline({ name: opts.name, message: '' }, function(err) {\n      if (err) callback(err);\n\n      callback();\n    });\n  });\n};\n\n/**\n * Node exists\n */\n\nNode.prototype.exists = function(opts, callback) {\n  if (typeof opts === 'string') {\n    opts = { name: opts };\n  } else {\n    opts = opts || {};\n  }\n\n  this.jenkins._log(['debug', 'build', 'exists'], opts);\n\n  var req = { name: 'node.exists' };\n\n  utils.options(req, opts);\n\n  try {\n    if (!opts.name) throw new Error('name required');\n\n    req.path = '/computer/{name}/api/json';\n    req.params = {\n      name: opts.name === 'master' ? '(master)' : opts.name,\n    };\n  } catch (err) {\n    return callback(this.jenkins._err(err, req));\n  }\n\n  return this.jenkins._head(req, middleware.exists, callback);\n};\n\n/**\n * Node details\n */\n\nNode.prototype.get = function(opts, callback) {\n  if (typeof opts === 'string') {\n    opts = { name: opts };\n  } else {\n    opts = opts || {};\n  }\n\n  this.jenkins._log(['debug', 'node', 'get'], opts);\n\n  var req = { name: 'node.get' };\n\n  utils.options(req, opts);\n\n  try {\n    if (!opts.name) throw new Error('name required');\n\n    req.path = '/computer/{name}/api/json';\n    req.params = {\n      name: opts.name === 'master' ? '(master)' : opts.name,\n    };\n  } catch (err) {\n    return callback(this.jenkins._err(err, req));\n  }\n\n  return this.jenkins._get(\n    req,\n    middleware.notFound(opts.name),\n    middleware.body,\n    callback\n  );\n};\n\n/**\n * List nodes\n */\n\nNode.prototype.list = function(opts, callback) {\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  } else {\n    opts = opts || {};\n  }\n\n  this.jenkins._log(['debug', 'node', 'list'], opts);\n\n  var req = {\n    name: 'node.list',\n    path: '/computer/api/json',\n  };\n\n  utils.options(req, opts);\n\n  if (opts.full === true) {\n    return this.jenkins._get(\n      req,\n      middleware.body,\n      callback\n    );\n  } else {\n    return this.jenkins._get(\n      req,\n      middleware.bodyItem('computer'),\n      callback\n    );\n  }\n};\n\n/**\n * Module exports.\n */\n\nexports.Node = Node;\n","/home/travis/build/npmtest/node-npmtest-jenkins/node_modules/jenkins/lib/queue.js":"/**\n * Queue client\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar middleware = require('./middleware');\nvar utils = require('./utils');\n\n/**\n * Initialize a new `Queue` client.\n */\n\nfunction Queue(jenkins) {\n  this.jenkins = jenkins;\n}\n\n/**\n * List queues\n */\n\nQueue.prototype.list = function(opts, callback) {\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  } else {\n    opts = opts || {};\n  }\n\n  this.jenkins._log(['debug', 'queue', 'list'], opts);\n\n  var req = {\n    name: 'queue.list',\n    path: '/queue/api/json',\n  };\n\n  utils.options(req, opts);\n\n  return this.jenkins._get(req, middleware.bodyItem('items'), callback);\n};\n\n/**\n * Get an individual queue item\n */\n\nQueue.prototype.item = function(opts, callback) {\n  var arg0 = typeof arguments[0];\n\n  if (arg0 === 'function') {\n    callback = opts;\n    opts = {};\n  } else {\n    if (arg0 === 'string' || arg0 === 'number') {\n      opts = {\n        number: opts\n      };\n    }\n    opts = opts || {};\n  }\n\n  this.jenkins._log(['debug', 'queue', 'item'], opts);\n\n  var req = {\n    name: 'queue.item',\n    path: '/queue/item/{number}/api/json',\n    params: {\n      number: opts.number\n    }\n  };\n\n  utils.options(req, opts);\n\n  if (!opts.number) {\n    return callback(this.jenkins._err(new Error('number required'), req));\n  }\n\n  return this.jenkins._get(req, middleware.body, callback);\n};\n\n/**\n * Deprecated\n */\n\nQueue.prototype.get = function(opts, callback) {\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  } else {\n    opts = opts || {};\n  }\n\n  this.list(opts, function(err, data) {\n    if (err) return callback(err);\n\n    callback(err, { items: data });\n  });\n};\n\n/**\n * Cancel queue item\n */\n\nQueue.prototype.cancel = function(opts, callback) {\n  if (typeof opts !== 'object') {\n    opts = { number: opts };\n  } else {\n    opts = opts || {};\n  }\n\n  this.jenkins._log(['debug', 'queue', 'cancel'], opts);\n\n  var req = { name: 'queue.cancel' };\n\n  utils.options(req, opts);\n\n  try {\n    if (!opts.number) throw new Error('number required');\n\n    req.path = '/queue/item/{number}/cancelQueue';\n    req.params = { number: opts.number };\n  } catch (err) {\n    return callback(this.jenkins._err(err, req));\n  }\n\n  return this.jenkins._post(\n    req,\n    middleware.require302('failed to cancel: ' + opts.number),\n    middleware.empty,\n    callback\n  );\n};\n\n/**\n * Module exports.\n */\n\nexports.Queue = Queue;\n","/home/travis/build/npmtest/node-npmtest-jenkins/node_modules/jenkins/lib/view.js":"/**\n * View client\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar middleware = require('./middleware');\nvar utils = require('./utils');\n\n/**\n * Initialize a new `View` client.\n */\n\nfunction View(jenkins) {\n  this.jenkins = jenkins;\n}\n\n/**\n * Object meta\n */\n\nView.meta = {};\n\n/**\n * Create new view\n */\n\nView.prototype.create = function(opts, callback) {\n  var arg0 = typeof arguments[0];\n  var arg1 = typeof arguments[1];\n  var arg2 = typeof arguments[2];\n\n  if (arg0 === 'string' && arg1 === 'string') {\n    opts = {\n      name: arguments[0],\n      type: arguments[1],\n    };\n    callback = arg2 === 'function' ? arguments[2] : undefined;\n  } else if (arg0 === 'string') {\n    opts = {\n      name: arguments[0],\n      type: 'list',\n    };\n  }\n\n  opts = opts || {};\n\n  this.jenkins._log(['debug', 'view', 'create'], opts);\n\n  var req = { name: 'view.create' };\n\n  utils.options(req, opts);\n\n  var shortcuts = {\n    list: 'hudson.model.ListView',\n    my: 'hudson.model.MyView',\n  };\n\n  try {\n    var folder = utils.FolderPath(opts.name);\n    var mode = shortcuts[opts.type] || opts.type;\n\n    if (folder.isEmpty()) throw new Error('name required');\n    if (!opts.type) throw new Error('type required');\n\n    req.path = '{dir}/createView';\n    req.type = 'form';\n    req.params = { dir: folder.dir() };\n    req.body = {\n      name: folder.name(),\n      mode: mode,\n      json: JSON.stringify({\n        name: folder.name(),\n        mode: mode,\n      }),\n    };\n  } catch (err) {\n    return callback(this.jenkins._err(err, req));\n  }\n\n  return this.jenkins._post(\n    req,\n    middleware.require302('failed to create: ' + opts.name),\n    middleware.empty,\n    callback\n  );\n};\n\n/**\n * Config list view\n */\n\nView.prototype.config = function(opts, callback) {\n  var arg0 = typeof arguments[0];\n  var arg1 = typeof arguments[1];\n  var arg2 = typeof arguments[2];\n\n  if (arg0 === 'string') {\n    opts = { name: arguments[0] };\n    if (arg1 === 'string') {\n      opts.xml = arguments[1];\n      callback = arg2 === 'function' ? arguments[2] : undefined;\n    } else {\n      callback = arg1 === 'function' ? arguments[1] : undefined;\n    }\n  }\n\n  opts = opts || {};\n\n  this.jenkins._log(['debug', 'view', 'config'], opts);\n\n  var req = {\n    path: '{dir}/view/{name}/config.xml',\n    name: 'view.config',\n  };\n\n  utils.options(req, opts);\n\n  try {\n    var folder = utils.FolderPath(opts.name);\n\n    if (folder.isEmpty()) throw new Error('name required');\n\n    req.params = { dir: folder.dir(), name: folder.name() };\n\n    if (opts.xml) {\n      req.method = 'POST';\n      req.headers = { 'content-type': 'text/xml' };\n      req.body = new Buffer(opts.xml);\n    } else {\n      req.method = 'GET';\n    }\n  } catch (err) {\n    return callback(this.jenkins._err(err, req));\n  }\n\n  return this.jenkins._request(\n    req,\n    middleware.notFound('view ' + opts.name),\n    function(ctx, next) {\n      if (ctx.err || opts.xml) return middleware.empty(ctx, next);\n\n      next(false, null, ctx.res.body.toString('utf8'));\n    },\n    callback\n  );\n};\n\n/**\n * Destroy view\n */\n\nView.prototype.destroy = function(opts, callback) {\n  if (typeof opts === 'string') {\n    opts = { name: opts };\n  } else {\n    opts = opts || {};\n  }\n\n  this.jenkins._log(['debug', 'view', 'destroy'], opts);\n\n  var req = { name: 'view.destroy' };\n\n  utils.options(req, opts);\n\n  try {\n    var folder = utils.FolderPath(opts.name);\n\n    if (folder.isEmpty()) throw new Error('name required');\n\n    req.path = '{dir}/view/{name}/doDelete';\n    req.params = { dir: folder.dir(), name: folder.name() };\n  } catch (err) {\n    return callback(this.jenkins._err(err, req));\n  }\n\n  return this.jenkins._post(\n    req,\n    middleware.notFound(opts.name),\n    middleware.require302('failed to delete: ' + opts.name),\n    middleware.empty,\n    callback\n  );\n};\n\nView.meta.delete = { type: 'alias' };\n\nView.prototype.delete = View.prototype.destroy;\n\n/**\n * View exists\n */\n\nView.prototype.exists = function(opts, callback) {\n  if (typeof opts === 'string') {\n    opts = { name: opts };\n  } else {\n    opts = opts || {};\n  }\n\n  this.jenkins._log(['debug', 'view', 'exists'], opts);\n\n  var req = { name: 'view.exists' };\n\n  utils.options(req, opts);\n\n  try {\n    var folder = utils.FolderPath(opts.name);\n\n    if (folder.isEmpty()) throw new Error('name required');\n\n    req.path = '{dir}/view/{name}/api/json';\n    req.params = { dir: folder.dir(), name: folder.name() };\n  } catch (err) {\n    return callback(this.jenkins._err(err, req));\n  }\n\n  return this.jenkins._head(req, middleware.exists, callback);\n};\n\n/**\n * View details\n */\n\nView.prototype.get = function(opts, callback) {\n  var arg0 = typeof arguments[0];\n  var arg1 = typeof arguments[1];\n  var arg2 = typeof arguments[2];\n\n  if (arg0 === 'string') {\n    if (arg1 === 'object') {\n      opts = arguments[1];\n      callback = arg2 === 'function' ? arguments[2] : undefined;\n    } else {\n      opts = {};\n      callback = arg1 === 'function' ? arguments[1] : undefined;\n    }\n    opts.name = arguments[0];\n  } else {\n    opts = opts || {};\n  }\n\n  this.jenkins._log(['debug', 'view', 'get'], opts);\n\n  var req = { name: 'view.get' };\n\n  utils.options(req, opts);\n\n  try {\n    var folder = utils.FolderPath(opts.name);\n\n    if (folder.isEmpty()) throw new Error('name required');\n\n    req.path = '{dir}/view/{name}/api/json';\n    req.params = { dir: folder.dir(), name: folder.name() };\n  } catch (err) {\n    return callback(this.jenkins._err(err, req));\n  }\n\n  return this.jenkins._get(\n    req,\n    middleware.notFound(opts.name),\n    middleware.body,\n    callback\n  );\n};\n\n/**\n * List views\n */\n\nView.prototype.list = function(opts, callback) {\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  } else if (typeof opts === 'string') {\n    opts = { name: opts };\n  } else {\n    opts = opts || {};\n  }\n\n  this.jenkins._log(['debug', 'view', 'list'], opts);\n\n  var req = {\n    name: 'view.list',\n    path: '{folder}/api/json',\n  };\n\n  try {\n    var folder = utils.FolderPath(opts.name);\n\n    req.params = { folder: folder.path() };\n  } catch (err) {\n    return callback(this.jenkins._err(err, req));\n  }\n\n  utils.options(req, opts);\n\n  return this.jenkins._get(\n    req,\n    function(ctx, next) {\n      if (ctx.err) return next();\n\n      if (!ctx.res.body || !Array.isArray(ctx.res.body.views)) {\n        ctx.err = new Error('returned bad data');\n      }\n\n      next();\n    },\n    middleware.bodyItem('views'),\n    callback\n  );\n};\n\n/**\n * Add job\n */\n\nView.prototype.add = function(opts, callback) {\n  var arg0 = typeof arguments[0];\n  var arg1 = typeof arguments[1];\n  var arg2 = typeof arguments[2];\n\n  if (arg0 === 'string' && arg1 === 'string') {\n    opts = {\n      name: arguments[0],\n      job: arguments[1],\n    };\n    callback = arg2 === 'function' ? arguments[2] : undefined;\n  }\n\n  opts = opts || {};\n\n  this.jenkins._log(['debug', 'view', 'add'], opts);\n\n  var req = {\n    path: '{dir}/view/{name}/addJobToView',\n    query: { name: opts.job },\n    type: 'form',\n    name: 'view.add',\n    body: {},\n  };\n\n  utils.options(req, opts);\n\n  try {\n    var folder = utils.FolderPath(opts.name);\n\n    if (folder.isEmpty()) throw new Error('name required');\n    if (!opts.job) throw new Error('job required');\n\n    req.params = { dir: folder.dir(), name: folder.name() };\n  } catch (err) {\n    return callback(this.jenkins._err(err, req));\n  }\n\n  return this.jenkins._post(\n    req,\n    middleware.empty,\n    callback\n  );\n};\n\n/**\n * Remove job\n */\n\nView.prototype.remove = function(opts, callback) {\n  var arg0 = typeof arguments[0];\n  var arg1 = typeof arguments[1];\n  var arg2 = typeof arguments[2];\n\n  if (arg0 === 'string' && arg1 === 'string') {\n    opts = {\n      name: arguments[0],\n      job: arguments[1],\n    };\n    callback = arg2 === 'function' ? arguments[2] : undefined;\n  }\n\n  opts = opts || {};\n\n  this.jenkins._log(['debug', 'view', 'remove'], opts);\n\n  var req = {\n    path: '{dir}/view/{name}/removeJobFromView',\n    query: { name: opts.job },\n    type: 'form',\n    name: 'view.remove',\n    body: {},\n  };\n\n  utils.options(req, opts);\n\n  try {\n    var folder = utils.FolderPath(opts.name);\n\n    if (folder.isEmpty()) throw new Error('name required');\n    if (!opts.job) throw new Error('job required');\n\n    req.params = { dir: folder.dir(), name: folder.name() };\n  } catch (err) {\n    return callback(this.jenkins._err(err, req));\n  }\n\n  return this.jenkins._post(\n    req,\n    middleware.empty,\n    callback\n  );\n};\n\n/**\n * Module exports.\n */\n\nexports.View = View;\n"}